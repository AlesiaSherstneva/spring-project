package com.udemy.springcourse.dao;

import com.udemy.springcourse.config.TestConfig;
import com.udemy.springcourse.pojo.Book;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.jdbc.DataJdbcTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ContextConfiguration;

import static org.junit.jupiter.api.Assertions.*;

@DataJdbcTest
@ContextConfiguration(classes = TestConfig.class)
class BookDAOTest {
    private final BookDAO bookDAO;
    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public BookDAOTest(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        bookDAO = new BookDAO(jdbcTemplate);
    }

    @BeforeEach
    void setUp() {
        jdbcTemplate.execute("CREATE TABLE Person (" +
                "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "name VARCHAR(250) UNIQUE," +
                "year INT NOT NULL CHECK ( year > 1900 AND year <= EXTRACT(year FROM now())))");
        jdbcTemplate.execute("INSERT INTO person(name, year) " +
                "VALUES ('Test Person1', 1990), ('Test Person2', 1975), ('Test Person3', 2004)");

        jdbcTemplate.execute("CREATE TABLE Book (" +
                "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "person_id INT REFERENCES Person(id) ON DELETE SET NULL," +
                "title VARCHAR(100) NOT NULL," +
                "author VARCHAR(250) NOT NULL," +
                "year INT NOT NULL CHECK(year > 1445 AND year <= EXTRACT(year FROM now())))");
        jdbcTemplate.execute("INSERT INTO Book(person_id, title, author, year) " +
                "VALUES (null, 'Test Title1', 'Test Author1', 1983), (1, 'Test Title2', 'Test Author2', 2011)");
    }

    @Test
    void showBooksTest() {
        assertEquals(2, bookDAO.showBooks().size());
    }

    @Test
    void showBooksByPersonTest() {
        assertEquals(1, bookDAO.showBooksByPerson(1).size());
        assertEquals(0, bookDAO.showBooksByPerson(2).size());
    }

    @Test
    void showBookTest() {
        assertEquals("Test Title1", bookDAO.showBook(1).getTitle());
        assertEquals("Test Author2", bookDAO.showBook(2).getAuthor());
        for (int i = 3; i <= 10; i++) assertNull(bookDAO.showBook(i));
    }

    @Test
    void saveTest() {
        Book testBook = new Book();
        testBook.setTitle("New Title");
        testBook.setAuthor("New Author");
        testBook.setYear(1900);

        bookDAO.save(testBook);

        assertEquals(3, bookDAO.showBooks().size());
        assertEquals(testBook.getTitle(), bookDAO.showBook(3).getTitle());
        assertEquals(testBook.getAuthor(), bookDAO.showBook(3).getAuthor());
    }

    @Test
    void freeTest() {
        assertNotNull(bookDAO.showBook(2).getPerson_id());
        bookDAO.free(2);
        assertNull(bookDAO.showBook(2).getPerson_id());
    }

    @Test
    void updateTest() {
        Book updatedBook = bookDAO.showBook(1);
        assertEquals("Test Title1", updatedBook.getTitle());
        assertEquals("Test Author1", updatedBook.getAuthor());
        assertNull(updatedBook.getPerson_id());

        updatedBook.setTitle("New Title");
        updatedBook.setAuthor("New Author");
        updatedBook.setPerson_id(3);
        bookDAO.update(1, updatedBook);

        updatedBook = bookDAO.showBook(1);
        assertEquals("New Title", updatedBook.getTitle());
        assertEquals("New Author", updatedBook.getAuthor());
        assertNotNull(updatedBook.getPerson_id());
    }

    @Test
    void deleteTest() {
        bookDAO.delete(1);
        assertNull(bookDAO.showBook(1));
        assertEquals(1, bookDAO.showBooks().size());
    }

    @AfterEach
    void tearDown() {
        jdbcTemplate.execute("DROP TABLE IF EXISTS Book");
        jdbcTemplate.execute("DROP TABLE IF EXISTS Person");
    }
}